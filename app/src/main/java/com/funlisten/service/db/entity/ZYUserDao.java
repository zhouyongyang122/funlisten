package com.funlisten.service.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.funlisten.business.login.model.bean.ZYUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZYUSER".
*/
public class ZYUserDao extends AbstractDao<ZYUser, String> {

    public static final String TABLENAME = "ZYUSER";

    /**
     * Properties of entity ZYUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property UserId = new Property(1, String.class, "userId", true, "USER_ID");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property OpenWechatId = new Property(4, String.class, "openWechatId", false, "OPEN_WECHAT_ID");
        public final static Property AvatarUrl = new Property(5, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property AlbumCount = new Property(7, int.class, "albumCount", false, "ALBUM_COUNT");
        public final static Property Intro = new Property(8, String.class, "intro", false, "INTRO");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Fans = new Property(10, int.class, "fans", false, "FANS");
        public final static Property Follow = new Property(11, int.class, "follow", false, "FOLLOW");
        public final static Property Token = new Property(12, String.class, "token", false, "TOKEN");
        public final static Property IsLoginUser = new Property(13, boolean.class, "isLoginUser", false, "IS_LOGIN_USER");
    }


    public ZYUserDao(DaoConfig config) {
        super(config);
    }
    
    public ZYUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZYUSER\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: userId
                "\"PHONE\" TEXT," + // 2: phone
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"OPEN_WECHAT_ID\" TEXT," + // 4: openWechatId
                "\"AVATAR_URL\" TEXT," + // 5: avatarUrl
                "\"AVATAR\" TEXT," + // 6: avatar
                "\"ALBUM_COUNT\" INTEGER NOT NULL ," + // 7: albumCount
                "\"INTRO\" TEXT," + // 8: intro
                "\"SEX\" TEXT," + // 9: sex
                "\"FANS\" INTEGER NOT NULL ," + // 10: fans
                "\"FOLLOW\" INTEGER NOT NULL ," + // 11: follow
                "\"TOKEN\" TEXT," + // 12: token
                "\"IS_LOGIN_USER\" INTEGER NOT NULL );"); // 13: isLoginUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZYUSER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZYUser entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String openWechatId = entity.getOpenWechatId();
        if (openWechatId != null) {
            stmt.bindString(5, openWechatId);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(6, avatarUrl);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
        stmt.bindLong(8, entity.getAlbumCount());
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(9, intro);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
        stmt.bindLong(11, entity.getFans());
        stmt.bindLong(12, entity.getFollow());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(13, token);
        }
        stmt.bindLong(14, entity.getIsLoginUser() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZYUser entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String openWechatId = entity.getOpenWechatId();
        if (openWechatId != null) {
            stmt.bindString(5, openWechatId);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(6, avatarUrl);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
        stmt.bindLong(8, entity.getAlbumCount());
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(9, intro);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
        stmt.bindLong(11, entity.getFans());
        stmt.bindLong(12, entity.getFollow());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(13, token);
        }
        stmt.bindLong(14, entity.getIsLoginUser() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public ZYUser readEntity(Cursor cursor, int offset) {
        ZYUser entity = new ZYUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // openWechatId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatarUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.getInt(offset + 7), // albumCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // intro
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.getInt(offset + 10), // fans
            cursor.getInt(offset + 11), // follow
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // token
            cursor.getShort(offset + 13) != 0 // isLoginUser
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZYUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOpenWechatId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvatarUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlbumCount(cursor.getInt(offset + 7));
        entity.setIntro(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFans(cursor.getInt(offset + 10));
        entity.setFollow(cursor.getInt(offset + 11));
        entity.setToken(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsLoginUser(cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(ZYUser entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(ZYUser entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZYUser entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
